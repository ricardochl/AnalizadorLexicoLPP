/* The following code was generated by JFlex 1.7.0 */

package code;
import java.io.*;
import static code.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/Ricardo Chavarria/Documents/NetBeansProjects/AnalizadoLexicoLPP/src/code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int PROCESS = 4;
  public static final int FUNCTION = 6;
  public static final int STRINGC = 8;
  public static final int COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\6\1\12\1\13\1\5\22\0\1\40\1\0\1\61"+
    "\2\0\1\56\1\0\1\62\1\43\1\44\1\11\1\60\1\55\1\52"+
    "\1\3\1\10\12\2\1\57\1\0\1\50\1\46\1\47\2\0\1\36"+
    "\1\41\1\30\1\31\1\17\1\16\1\37\1\24\1\15\2\4\1\20"+
    "\1\32\1\33\1\27\1\25\1\4\1\26\1\22\1\34\1\35\1\42"+
    "\1\23\1\4\1\45\1\4\1\53\1\63\1\54\1\0\1\1\1\0"+
    "\1\36\1\41\1\30\1\31\1\17\1\16\1\37\1\24\1\15\2\4"+
    "\1\20\1\32\1\33\1\27\1\25\1\4\1\26\1\22\1\34\1\35"+
    "\1\42\1\23\1\4\1\45\1\4\12\0\1\12\252\0\2\14\115\0"+
    "\1\21\u1ea8\0\1\12\1\12\u0166\0\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ude7f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\1\4\2\1\1\5\2\1\10\7\2\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\1\1\34\1\5\1\35\1\5\1\36\1\0"+
    "\1\36\1\2\1\0\3\2\1\0\4\2\2\37\6\2"+
    "\1\0\1\2\1\40\1\0\6\2\1\0\1\41\1\42"+
    "\1\43\2\0\1\2\2\44\1\2\1\0\1\2\1\0"+
    "\2\2\1\45\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\10\2\1\0\3\2\2\46\1\0\1\2\1\47\3\2"+
    "\1\50\3\0\1\2\1\0\1\2\1\0\4\2\2\51"+
    "\1\0\1\2\1\52\1\2\1\53\1\0\2\2\1\54"+
    "\1\0\1\2\2\55\2\2\1\0\4\2\1\3\2\0"+
    "\1\2\6\0\1\2\1\0\4\2\2\56\1\2\1\0"+
    "\2\2\1\0\3\2\1\0\4\2\1\0\2\57\1\60"+
    "\5\0\1\2\1\0\1\2\1\61\1\2\1\62\1\2"+
    "\2\63\1\2\1\0\2\2\1\64\1\0\4\2\5\0"+
    "\2\65\2\66\1\2\1\0\1\2\1\67\1\0\2\2"+
    "\1\0\2\2\1\70\1\2\1\0\1\71\1\0\1\72"+
    "\1\0\2\73\1\0\1\2\2\74\1\75\2\76\1\0"+
    "\1\2\1\77\1\31\3\0\1\2\1\0\1\2\3\0"+
    "\1\2\1\0\1\2\3\0\1\2\2\100\1\101\1\102"+
    "\1\0\1\2\2\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u0138\0\u023c\0\u0138\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u016c\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u0138\0\u016c\0\u0138\0\u064c\0\u0680\0\u0138"+
    "\0\u016c\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u06b4\0\u0138\0\u06e8\0\u071c\0\u0750\0\u0138\0\u0784"+
    "\0\u01d4\0\u07b8\0\u0138\0\u07ec\0\u016c\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u016c\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0138\0\u0138\0\u0138\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u016c\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4"+
    "\0\u1318\0\u134c\0\u1380\0\u0138\0\u016c\0\u13b4\0\u13e8\0\u016c"+
    "\0\u141c\0\u1450\0\u1484\0\u016c\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u0138"+
    "\0\u016c\0\u16f4\0\u1728\0\u016c\0\u175c\0\u016c\0\u1790\0\u17c4"+
    "\0\u17f8\0\u016c\0\u182c\0\u1860\0\u0138\0\u016c\0\u1894\0\u18c8"+
    "\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u0138\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u0138\0\u016c\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u0138\0\u016c\0\u0138"+
    "\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150"+
    "\0\u016c\0\u2184\0\u016c\0\u21b8\0\u0138\0\u016c\0\u21ec\0\u2220"+
    "\0\u2254\0\u2288\0\u016c\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u0138\0\u016c\0\u0138"+
    "\0\u016c\0\u24c4\0\u24f8\0\u252c\0\u016c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u016c\0\u2698\0\u26cc\0\u0138\0\u2700"+
    "\0\u0138\0\u2734\0\u0138\0\u016c\0\u2768\0\u279c\0\u0138\0\u016c"+
    "\0\u016c\0\u0138\0\u016c\0\u27d0\0\u2804\0\u016c\0\u0138\0\u2838"+
    "\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8"+
    "\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u0138"+
    "\0\u016c\0\u0138\0\u0138\0\u2b78\0\u2bac\0\u0138\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\10\1\13\2\14\1\15"+
    "\1\16\1\0\1\14\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\10\1\37\1\10\1\14\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\7\5\62\2\0\52\62\1\63\1\62\2\7"+
    "\1\64\2\7\1\64\1\13\2\14\1\65\1\7\1\0"+
    "\1\14\1\7\4\64\1\7\16\64\1\14\2\64\2\7"+
    "\1\64\4\7\1\64\16\7\2\0\3\7\2\0\55\7"+
    "\2\0\3\7\2\0\14\7\1\66\31\7\1\67\1\7"+
    "\5\70\2\0\52\70\1\7\1\70\1\7\65\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\13\0\1\11\1\71\62\0"+
    "\1\71\67\0\1\14\65\0\2\72\70\0\1\73\14\0"+
    "\1\74\31\0\2\10\1\0\1\10\10\0\1\10\1\75"+
    "\2\10\1\0\11\10\1\76\4\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\7\0"+
    "\1\77\1\100\3\10\1\0\13\10\1\101\2\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\3\10\1\102\1\103\1\104\10\10\1\105"+
    "\4\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\2\10\1\106\1\107\1\0"+
    "\16\10\1\0\2\10\2\0\1\10\4\0\1\10\25\0"+
    "\2\110\47\0\2\10\1\0\1\10\7\0\1\110\1\111"+
    "\3\10\1\0\16\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\2\10\1\112\13\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\14\10\1\113\1\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\4\10\1\114\7\10\1\115\1\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\2\10\1\116\1\10\1\0\16\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\14\10\1\117\1\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\7\0"+
    "\1\120\1\121\1\10\1\122\1\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\7\0\1\123\1\124\3\10\1\0\5\10\1\125"+
    "\10\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\13\10\1\126"+
    "\2\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\4\10\1\127"+
    "\11\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\5\10\1\130"+
    "\10\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\14\10\1\131"+
    "\1\10\1\0\2\10\2\0\1\10\4\0\1\10\63\0"+
    "\1\132\57\0\1\133\63\0\1\134\1\135\2\0\1\50"+
    "\11\0\5\62\2\0\52\62\1\0\1\62\2\0\2\64"+
    "\1\0\1\64\10\0\4\64\1\0\16\64\1\0\2\64"+
    "\2\0\1\64\4\0\1\64\21\0\1\72\102\0\1\136"+
    "\34\0\5\70\2\0\52\70\1\0\1\70\1\0\5\72"+
    "\2\0\3\72\2\0\50\72\14\0\2\137\47\0\2\10"+
    "\1\0\1\10\7\0\1\137\1\140\3\10\1\0\16\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\44\0\1\141"+
    "\31\0\2\10\1\0\1\10\10\0\4\10\1\0\11\10"+
    "\1\142\4\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\12\0\2\10\1\0\1\10\10\0\4\10\1\0\11\10"+
    "\1\143\4\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\12\0\2\10\1\0\1\10\10\0\4\10\1\144\1\145"+
    "\15\10\1\0\2\10\2\0\1\10\4\0\1\10\41\0"+
    "\1\146\34\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\6\10\1\147\7\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\12\10\1\150\3\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\14\10\1\151\1\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\14\10\1\152\1\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\44\0\1\153\31\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\11\10\1\154\4\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\7\0"+
    "\1\155\1\156\3\10\1\0\16\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\157\1\160\14\10\1\161\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\5\10\1\162\10\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\4\10\1\163\11\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\3\10\1\164\6\10\1\165\1\10\1\166"+
    "\1\167\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\170\1\171\3\10"+
    "\1\172\2\10\1\173\6\10\1\0\2\10\2\0\1\10"+
    "\4\0\1\10\53\0\1\174\22\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\16\10\1\0\1\10\1\175\2\0"+
    "\1\10\4\0\1\10\30\0\1\176\45\0\2\10\1\0"+
    "\1\10\10\0\2\10\1\177\1\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\7\10\1\200\6\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\2\10\1\201\1\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\4\10\1\202\11\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\5\10\1\203\10\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\4\10\1\204\11\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\13\0\1\205\113\0"+
    "\1\206\61\0\1\207\34\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\6\10\1\210\7\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\51\0\1\211\24\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\16\10\1\211\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\6\10\1\212\7\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\30\0\1\73\45\0\2\10\1\0"+
    "\1\10\10\0\2\10\1\75\1\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\37\0\1\213\36\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\4\10\1\214"+
    "\11\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\2\10\1\215\1\10\1\0"+
    "\5\10\1\216\10\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\10\10\1\217\5\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\40\0\1\220\35\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\5\10\1\221\10\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\31\0\1\144\44\0\2\10\1\0"+
    "\1\10\10\0\3\10\1\145\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\45\0\1\222\30\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\12\10\1\223\3\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\14\10\1\224\1\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\6\10\1\225\7\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\14\10\1\226\1\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\7\0\1\227\1\230\3\10\1\0\16\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\5\10\1\231\10\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\3\10\1\232\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\7\0\1\233\1\234\3\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\40\0\1\235\35\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\5\10\1\236"+
    "\10\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\14\10\1\237"+
    "\1\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\2\10\1\240\1\10\1\0"+
    "\16\10\1\0\2\10\2\0\1\10\4\0\1\10\44\0"+
    "\1\241\31\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\11\10\1\242\4\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\16\10\1\0\1\10\1\243\2\0\1\10\4\0\1\10"+
    "\12\0\2\10\1\0\1\10\10\0\2\10\1\244\1\10"+
    "\1\0\16\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\12\0\2\10\1\0\1\10\10\0\3\10\1\245\1\0"+
    "\16\10\1\0\2\10\2\0\1\10\4\0\1\10\13\0"+
    "\1\205\41\0\1\246\33\0\2\247\62\0\2\250\47\0"+
    "\2\10\1\0\1\10\7\0\1\250\1\251\3\10\1\0"+
    "\16\10\1\0\2\10\2\0\1\10\4\0\1\10\32\0"+
    "\2\252\2\0\1\253\1\254\1\0\1\255\1\0\1\256"+
    "\32\0\2\10\1\0\1\10\7\0\1\257\1\260\3\10"+
    "\1\0\16\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\25\0\2\261\47\0\2\10\1\0\1\10\7\0\1\261"+
    "\1\262\3\10\1\0\16\10\1\0\2\10\2\0\1\10"+
    "\4\0\1\10\12\0\2\10\1\0\1\10\10\0\4\10"+
    "\1\0\4\10\1\263\11\10\1\0\2\10\2\0\1\10"+
    "\4\0\1\10\12\0\2\10\1\0\1\10\10\0\4\10"+
    "\1\0\11\10\1\264\4\10\1\0\2\10\2\0\1\10"+
    "\4\0\1\10\12\0\2\10\1\0\1\10\10\0\4\10"+
    "\1\0\14\10\1\265\1\10\1\0\2\10\2\0\1\10"+
    "\4\0\1\10\47\0\1\266\26\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\14\10\1\267\1\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\12\0\2\10\1\0\1\10"+
    "\10\0\2\10\1\270\1\10\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\45\0\1\271\30\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\12\10\1\272\3\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\4\10\1\273\11\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\32\0\2\274"+
    "\42\0\2\10\1\0\1\10\10\0\4\10\1\274\1\275"+
    "\15\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\6\10\1\276"+
    "\7\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\11\10\1\277"+
    "\4\10\1\0\2\10\2\0\1\10\4\0\1\10\45\0"+
    "\1\300\30\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\12\10\1\301\3\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\14\10\1\302\1\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\15\10\1\303\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\12\0\2\10\1\0\1\10\10\0\2\10\1\304\1\10"+
    "\1\0\16\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\31\0\1\305\72\0\1\306\35\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\5\10\1\307\10\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\25\0\2\310\104\0\1\311"+
    "\44\0\1\312\102\0\1\313\41\0\2\314\75\0\1\315"+
    "\35\0\2\10\1\0\1\10\10\0\4\10\1\0\5\10"+
    "\1\316\10\10\1\0\2\10\2\0\1\10\4\0\1\10"+
    "\52\0\1\317\23\0\2\10\1\0\1\10\10\0\4\10"+
    "\1\0\16\10\1\0\1\320\1\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\5\10\1\321\10\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\6\10\1\322\7\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\4\10\1\323\11\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\12\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\7\10\1\324\6\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\47\0\1\325\26\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\14\10\1\326\1\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\11\10\1\327\4\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\45\0\1\330\30\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\12\10\1\331\3\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\12\10\1\332\3\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\14\10\1\333\1\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\37\0\1\334\36\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\4\10\1\335"+
    "\11\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\1\336\1\10\1\0\1\10\10\0\4\10\1\0\16\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\3\10\1\337\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\14\10\1\340\1\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\31\0\1\341\71\0"+
    "\1\342\74\0\1\343\45\0\2\344\60\0\1\345\77\0"+
    "\1\346\31\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\11\10\1\347\4\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\47\0\1\350\26\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\14\10\1\351\1\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\2\10\1\352\1\10\1\0\16\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\7\0"+
    "\1\353\1\354\3\10\1\0\16\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\2\10\1\355\1\10\1\0\16\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\37\0\1\356\36\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\0\4\10\1\357\11\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\12\0\2\10\1\0"+
    "\1\10\10\0\2\10\1\360\1\10\1\0\16\10\1\0"+
    "\2\10\2\0\1\10\4\0\1\10\47\0\1\361\26\0"+
    "\2\10\1\0\1\10\10\0\4\10\1\0\14\10\1\362"+
    "\1\10\1\0\2\10\2\0\1\10\4\0\1\10\12\0"+
    "\2\10\1\0\1\10\10\0\3\10\1\363\1\0\16\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\5\10\1\364\10\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\12\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\11\10\1\365\4\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\47\0\1\366"+
    "\63\0\1\367\41\0\2\370\75\0\1\371\67\0\1\372"+
    "\31\0\2\10\1\0\1\10\10\0\4\10\1\373\1\374"+
    "\15\10\1\0\2\10\2\0\1\10\4\0\1\10\43\0"+
    "\1\375\32\0\2\10\1\0\1\10\10\0\4\10\1\0"+
    "\10\10\1\376\5\10\1\0\2\10\2\0\1\10\4\0"+
    "\1\10\40\0\1\377\35\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\5\10\1\u0100\10\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\12\0\2\10\1\0\1\10\10\0"+
    "\4\10\1\0\4\10\1\u0101\11\10\1\0\2\10\2\0"+
    "\1\10\4\0\1\10\32\0\2\u0102\42\0\2\10\1\0"+
    "\1\10\10\0\4\10\1\u0102\1\u0103\15\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\12\0\2\10\1\0\1\10"+
    "\7\0\1\u0104\1\u0105\3\10\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\12\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\5\10\1\u0106\10\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\32\0\2\u0107\62\0\2\u0108"+
    "\75\0\1\u0109\43\0\2\u010a\47\0\2\10\1\0\1\10"+
    "\7\0\1\u010a\1\u010b\3\10\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\44\0\1\u010c\31\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\11\10\1\u010d\4\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\45\0\1\u010e"+
    "\55\0\1\u010f\54\0\1\u0110\45\0\2\10\1\0\1\10"+
    "\10\0\2\10\1\u0111\1\10\1\0\16\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\30\0\1\u0112\45\0\2\10"+
    "\1\0\1\10\10\0\2\10\1\u0113\1\10\1\0\16\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\37\0\1\u0114"+
    "\73\0\1\u0115\60\0\1\u0116\31\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\11\10\1\u0117\4\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\47\0\1\u0118\26\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\14\10\1\u0119\1\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\40\0\1\u011a"+
    "\55\0\2\u011b\75\0\1\u011c\30\0\2\10\1\0\1\10"+
    "\10\0\4\10\1\0\12\10\1\u011d\3\10\1\0\2\10"+
    "\2\0\1\10\4\0\1\10\40\0\1\u011e\35\0\2\10"+
    "\1\0\1\10\10\0\4\10\1\0\5\10\1\u011f\10\10"+
    "\1\0\2\10\2\0\1\10\4\0\1\10\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\1\1\1\11\24\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\10\11\1\1\1\11"+
    "\3\1\1\11\3\1\1\11\1\0\2\1\1\0\3\1"+
    "\1\0\14\1\1\0\2\1\1\0\6\1\1\0\3\11"+
    "\2\0\4\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\10\1\1\0\3\1\1\11\1\1"+
    "\1\0\6\1\3\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\1\1\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\1\1\0\4\1\1\11\2\0\1\1\6\0"+
    "\1\1\1\0\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\4\1\1\0\1\11\1\1\1\11\5\0"+
    "\1\1\1\0\5\1\1\11\2\1\1\0\3\1\1\0"+
    "\4\1\5\0\1\11\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\4\1\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\2\1\1\11\3\0\1\1\1\0\1\1"+
    "\3\0\1\1\1\0\1\1\3\0\1\1\1\11\1\1"+
    "\2\11\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public String cadena;
    public int line;
    public int column;
    StringBuffer string = new StringBuffer();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { line=yyline; column=yycolumn; lexeme="Simbolo no definido"; cadena=yytext(); return ERROR;
            } 
            // fall through
          case 68: break;
          case 2: 
            { line=yyline; column=yycolumn; lexeme="Identificador"; cadena=yytext(); return Identificador;
            } 
            // fall through
          case 69: break;
          case 3: 
            { line=yyline; column=yycolumn; lexeme="Numero Entero"; cadena=yytext(); return Numero;
            } 
            // fall through
          case 70: break;
          case 4: 
            { line=yyline; column=yycolumn; lexeme="Punto"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 71: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 72: break;
          case 6: 
            { line=yyline; column=yycolumn; lexeme="operador de division"; cadena=yytext();return Division;
            } 
            // fall through
          case 73: break;
          case 7: 
            { line=yyline; column=yycolumn; lexeme="Operador de multiplicacion"; cadena=yytext();return Multiplicacion;
            } 
            // fall through
          case 74: break;
          case 8: 
            { line=yyline; column=yycolumn; lexeme="Operador de lógica O"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 75: break;
          case 9: 
            { line=yyline; column=yycolumn; lexeme="Parentesis de apertura"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 76: break;
          case 10: 
            { line=yyline; column=yycolumn; lexeme="Parentesis de cierre"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 77: break;
          case 11: 
            { line=yyline; column=yycolumn; lexeme="Operador de lógica Y"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 78: break;
          case 12: 
            { line=yyline; column=yycolumn; lexeme="Operador de comparacion"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 79: break;
          case 13: 
            { line=yyline; column=yycolumn; lexeme="Mayor que"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 80: break;
          case 14: 
            { line=yyline; column=yycolumn; lexeme="Menor que"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 81: break;
          case 15: 
            { line=yyline; column=yycolumn; lexeme="Operador de asignacion de valor de variables"; cadena=yytext();return Operador;
            } 
            // fall through
          case 82: break;
          case 16: 
            { line=yyline; column=yycolumn; lexeme="Operador de resta"; cadena=yytext();return Resta;
            } 
            // fall through
          case 83: break;
          case 17: 
            { line=yyline; column=yycolumn; lexeme="Corchete de Apertura"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 84: break;
          case 18: 
            { line=yyline; column=yycolumn; lexeme="Corchete de Cierre"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 85: break;
          case 19: 
            { line=yyline; column=yycolumn; lexeme="Coma simple"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 86: break;
          case 20: 
            { line=yyline; column=yycolumn; lexeme="Simbolo de porcentaje"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 87: break;
          case 21: 
            { line=yyline; column=yycolumn; lexeme="Dos puntos"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 88: break;
          case 22: 
            { line=yyline; column=yycolumn; lexeme="Operador de suma"; cadena=yytext();return Suma;
            } 
            // fall through
          case 89: break;
          case 23: 
            { string.setLength(0); yybegin(STRING); line=yyline; column=yycolumn; lexeme="Comillas Dobles"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 90: break;
          case 24: 
            { string.setLength(0); yybegin(STRINGC); line=yyline; column=yycolumn; lexeme="Comillas Simples"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 91: break;
          case 25: 
            { string.append(yytext()); line=yyline; column=yycolumn; lexeme="Cadena";  cadena=string.toString(); return Cadena;
            } 
            // fall through
          case 92: break;
          case 26: 
            { yybegin(YYINITIAL); line=yyline; column=yycolumn; lexeme="Comillas Dobles"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 93: break;
          case 27: 
            { yybegin(YYINITIAL); line=yyline; column=yycolumn; lexeme="Nombre del procedimiento"; cadena=yytext(); return Identificador;
            } 
            // fall through
          case 94: break;
          case 28: 
            { yybegin(YYINITIAL); line=yyline; column=yycolumn; lexeme="Comillas Simples"; cadena=yytext(); return CaracterEspecial;
            } 
            // fall through
          case 95: break;
          case 29: 
            { line=yyline; column=yycolumn; lexeme="Numero Decimal"; cadena=yytext(); return Numero;
            } 
            // fall through
          case 96: break;
          case 30: 
            { line=yyline; column=yycolumn; lexeme="descripcion"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 97: break;
          case 31: 
            { line=yyline; column=yycolumn; lexeme="Sentencia de condicion"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 98: break;
          case 32: 
            { line=yyline; column=yycolumn; lexeme="sentencia de"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 99: break;
          case 33: 
            { line=yyline; column=yycolumn; lexeme="Mayor o igual que"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 100: break;
          case 34: 
            { line=yyline; column=yycolumn; lexeme="Menor o igual que"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 101: break;
          case 35: 
            { line=yyline; column=yycolumn; lexeme="Diferente de"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 102: break;
          case 36: 
            { line=yyline; column=yycolumn; lexeme="Sentencia de fin"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 103: break;
          case 37: 
            { line=yyline; column=yycolumn; lexeme="Lee una variable"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 104: break;
          case 38: 
            { line=yyline; column=yycolumn; lexeme="Operador de división entera "; cadena=yytext(); return Operador;
            } 
            // fall through
          case 105: break;
          case 39: 
            { line=yyline; column=yycolumn; lexeme="Operador de cáculo de residuo"; cadena=yytext(); return Operador;
            } 
            // fall through
          case 106: break;
          case 40: 
            { line=yyline; column=yycolumn; lexeme="Indica que la variable es un parametro de referencia o variable"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 107: break;
          case 41: 
            { line=yyline; column=yycolumn; lexeme="Sentencia de lo contrario"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 108: break;
          case 42: 
            { line=yyline; column=yycolumn; lexeme="Instruccion haga del bucle"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 109: break;
          case 43: 
            { line=yyline; column=yycolumn; lexeme="Instruccion inicial del bucle para"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 110: break;
          case 44: 
            { line=yyline; column=yycolumn; lexeme="Tipo de dato - Números con cifras decimales"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 111: break;
          case 45: 
            { line=yyline; column=yycolumn; lexeme="Instruccion inicial de la estructura caso"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 112: break;
          case 46: 
            { line=yyline; column=yycolumn; lexeme="Instruccion hasta del bucle"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 113: break;
          case 47: 
            { line=yyline; column=yycolumn; lexeme="Sentencia de inicio"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 114: break;
          case 48: 
            { line=yyline; column=yycolumn; lexeme="Sentencia final de condicion"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 115: break;
          case 49: 
            { line=yyline; column=yycolumn; lexeme="Tipo de dato - Solo números enteros"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 116: break;
          case 50: 
            { line=yyline; column=yycolumn; lexeme="Palabra reservada para llamar un procedimiento"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 117: break;
          case 51: 
            { line=yyline; column=yycolumn; lexeme="Instruccion inicial del bucle repita"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 118: break;
          case 52: 
            { line=yyline; column=yycolumn; lexeme="Tipo de dato - Cuando queremos guardar letras "; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 119: break;
          case 53: 
            { line=yyline; column=yycolumn; lexeme="Instruccion de funcion"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 120: break;
          case 54: 
            { line=yyline; column=yycolumn; lexeme="Escribe un texto"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 121: break;
          case 55: 
            { line=yyline; column=yycolumn; lexeme="Devuelve el valor de la funcion"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 122: break;
          case 56: 
            { line=yyline; column=yycolumn; lexeme="Instruccion de arreglo"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 123: break;
          case 57: 
            { line=yyline; column=yycolumn; lexeme="Instruccion finial del bucle mientras"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 124: break;
          case 58: 
            { line=yyline; column=yycolumn; lexeme="Instruccion final de la estructura caso"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 125: break;
          case 59: 
            { line=yyline; column=yycolumn; lexeme="Entonces"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 126: break;
          case 60: 
            { line=yyline; column=yycolumn; lexeme="Instruccion inicial de registro"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 127: break;
          case 61: 
            { line=yyline; column=yycolumn; lexeme="Tipo de dato - Cuando queremos guardar un solo carácter"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 128: break;
          case 62: 
            { line=yyline; column=yycolumn; lexeme="Instruccion inicial del bucle mientras"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 129: break;
          case 63: 
            { line=yyline; column=yycolumn; lexeme="Tipo de dato - Cuando necesitamos guardar una expresión lógica (verdadero o falso) "; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 130: break;
          case 64: 
            { line=yyline; column=yycolumn; lexeme="Instruccion que realiza un salto de linea"; cadena=yytext(); return Identificador;
            } 
            // fall through
          case 131: break;
          case 65: 
            { line=yyline; column=yycolumn; lexeme="Sentencia final de un registro"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 132: break;
          case 66: 
            { line=yyline; column=yycolumn; lexeme="Instruccion final del bucle mientras"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 133: break;
          case 67: 
            { line=yyline; column=yycolumn; lexeme="Instruccion de procedimiento"; cadena=yytext(); return Reservada;
            } 
            // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
